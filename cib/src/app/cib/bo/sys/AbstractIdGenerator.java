/*
 * WARNING: DO NOT EDIT THIS FILE. This is a generated file that is synchronized
 * by MyEclipse Hibernate tool integration.
 *
 * Created Mon Mar 19 14:08:45 CST 2007 by MyEclipse Hibernate Tool.
 */
package app.cib.bo.sys;

import java.io.Serializable;

/**
 * A class that represents a row in the ID_GENERATOR table. 
 * You can customize the behavior of this class by editing the class, {@link IdGenerator()}.
 * WARNING: DO NOT EDIT THIS FILE. This is a generated file that is synchronized
 * by MyEclipse Hibernate tool integration.
 */
public abstract class AbstractIdGenerator 
    implements Serializable
{
    /** The cached hash code value for this instance.  Settting to 0 triggers re-calculation. */
    private int hashValue = 0;

    /** The composite primary key value. */
    private java.lang.String idType;

    /** The value of the simple currentId property. */
    private java.lang.Integer currentId;

    /**
     * Simple constructor of AbstractIdGenerator instances.
     */
    public AbstractIdGenerator()
    {
    }

    /**
     * Constructor of AbstractIdGenerator instances given a simple primary key.
     * @param idType
     */
    public AbstractIdGenerator(java.lang.String idType)
    {
        this.setIdType(idType);
    }

    /**
     * Return the simple primary key value that identifies this object.
     * @return java.lang.String
     */
    public java.lang.String getIdType()
    {
        return idType;
    }

    /**
     * Set the simple primary key value that identifies this object.
     * @param idType
     */
    public void setIdType(java.lang.String idType)
    {
        this.hashValue = 0;
        this.idType = idType;
    }

    /**
     * Return the value of the CURRENT_ID column.
     * @return java.lang.Integer
     */
    public java.lang.Integer getCurrentId()
    {
        return this.currentId;
    }

    /**
     * Set the value of the CURRENT_ID column.
     * @param currentId
     */
    public void setCurrentId(java.lang.Integer currentId)
    {
        this.currentId = currentId;
    }

    /**
     * Implementation of the equals comparison on the basis of equality of the primary key values.
     * @param rhs
     * @return boolean
     */
    public boolean equals(Object rhs)
    {
        if (rhs == null)
            return false;
        if (! (rhs instanceof IdGenerator))
            return false;
        IdGenerator that = (IdGenerator) rhs;
        if (this.getIdType() == null || that.getIdType() == null)
            return false;
        return (this.getIdType().equals(that.getIdType()));
    }

    /**
     * Implementation of the hashCode method conforming to the Bloch pattern with
     * the exception of array properties (these are very unlikely primary key types).
     * @return int
     */
    public int hashCode()
    {
        if (this.hashValue == 0)
        {
            int result = 17;
            int idTypeValue = this.getIdType() == null ? 0 : this.getIdType().hashCode();
            result = result * 37 + idTypeValue;
            this.hashValue = result;
        }
        return this.hashValue;
    }
}
